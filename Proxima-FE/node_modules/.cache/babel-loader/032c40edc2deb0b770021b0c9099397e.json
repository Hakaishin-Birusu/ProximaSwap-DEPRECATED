{"ast":null,"code":"import JSBI from 'jsbi';\nexport { default as JSBI } from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport { getAddress, getCreate2Address } from '@ethersproject/address';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport _Decimal from 'decimal.js-light';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { Contract } from '@ethersproject/contracts';\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json';\n\nvar _SOLIDITY_TYPE_MAXIMA;\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId['MAINNET'] = 1] = 'MAINNET';\n  ChainId[ChainId['ROPSTEN'] = 3] = 'ROPSTEN';\n  ChainId[ChainId['RINKEBY'] = 4] = 'RINKEBY';\n  ChainId[ChainId['G\\xD6RLI'] = 5] = 'G\\xD6RLI';\n  ChainId[ChainId['KOVAN'] = 42] = 'KOVAN';\n})(ChainId || (ChainId = {}));\n\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType['EXACT_INPUT'] = 0] = 'EXACT_INPUT';\n  TradeType[TradeType['EXACT_OUTPUT'] = 1] = 'EXACT_OUTPUT';\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding['ROUND_DOWN'] = 0] = 'ROUND_DOWN';\n  Rounding[Rounding['ROUND_HALF_UP'] = 1] = 'ROUND_HALF_UP';\n  Rounding[Rounding['ROUND_UP'] = 2] = 'ROUND_UP';\n})(Rounding || (Rounding = {}));\n\nvar FACTORY_ADDRESS = '0xfcA10849b32eaD3EAEA528Fec93b7b0dd5B7E088';\nvar INIT_CODE_HASH = '0xb89b57a93c0966b7a20ab0aa0fdf534c6eead4b3568e2c21e734d0a58530531e';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\n\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\n\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\n\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\n\nvar SolidityType;\n\n(function (SolidityType) {\n  SolidityType['uint8'] = 'uint8';\n  SolidityType['uint256'] = 'uint256';\n})(SolidityType || (SolidityType = {}));\n\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if ('value' in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === 'function') return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf('[native code]') !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === 'function' ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== 'function') {\n      throw new TypeError('Super expression must either be null or a function');\n    }\n\n    if (typeof _cache !== 'undefined') {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === 'Object' && o.constructor) n = o.constructor.name;\n  if (n === 'Map' || n === 'Set') return Array.from(o);\n  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === 'undefined' || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === 'number') {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError('Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.');\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== 'production' ? invariant(false, value + ' is not a ' + solidityType + '.') : invariant(false) : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? process.env.NODE_ENV !== 'production' ? invariant(false, value + ' is not a ' + solidityType + '.') : invariant(false) : void 0;\n} // warns if addresses are not checksummed\n\n\nfunction validateAndParseAddress(address) {\n  try {\n    var checksummedAddress = getAddress(address);\n    process.env.NODE_ENV !== 'production' ? warning(address === checksummedAddress, address + ' is not checksummed.') : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    process.env.NODE_ENV !== 'production' ? invariant(false, address + ' is not a valid address.') : invariant(false);\n  }\n}\n\nfunction parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n} // mock the on-chain sqrt function\n\n\nfunction sqrt(y) {\n  validateSolidityTypeInstance(y, SolidityType.uint256);\n  var z = ZERO;\n  var x;\n\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\n\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n\n  return z;\n} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\n\n\nvar Currency =\n/**\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n * @param decimals decimals of the currency\n * @param symbol symbol of the currency\n * @param name of the currency\n */\nfunction Currency(decimals, symbol, name) {\n  validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\n * The only instance of the base class `Currency`.\n */\n\n\nCurrency.ETHER = /*#__PURE__*/new Currency(18, 'ETH', 'Ether');\nvar ETHER = Currency.ETHER;\n\nvar _WETH;\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\n\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n\n    return this.chainId === other.chainId && this.address === other.address;\n  };\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n\n  return Token;\n}(Currency);\n/**\n * Compares two currencies for equality\n */\n\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar WETH = (_WETH = {}, _WETH[ChainId.MAINNET] = /*#__PURE__*/new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.ROPSTEN] = /*#__PURE__*/new Token(ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.RINKEBY] = /*#__PURE__*/new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.GÖRLI] = /*#__PURE__*/new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.KOVAN] = /*#__PURE__*/new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH);\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = ONE;\n    }\n\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== 'production' ? invariant(false, significantDigits + ' is not an integer.') : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, significantDigits + ' is not positive.') : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== 'production' ? invariant(false, decimalPlaces + ' is not an integer.') : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, decimalPlaces + ' is negative.') : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n\n  _createClass(Fraction, [{\n    key: 'quotient',\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: 'remainder',\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction); // amount _must_ be raw, i.e. in the native representation\n\n\n  function CurrencyAmount(currency, amount) {\n    var _this;\n\n    var parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: 'raw',\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount); // amount _must_ be raw, i.e. in the native representation\n\n\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n\n  var _proto = TokenAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n\n  return TokenAmount;\n}(CurrencyAmount);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction); // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n\n  Price.fromRoute = function fromRoute(route) {\n    var prices = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n\n    return prices.slice(1).reduce(function (accumulator, currentValue) {\n      return accumulator.multiply(currentValue);\n    }, prices[0]);\n  };\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }; // performs floor division on overflow\n\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: 'raw',\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: 'adjusted',\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n\nvar PAIR_ADDRESS_CACHE = {};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;\n\n    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n\n    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE === void 0 ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) === null || _PAIR_ADDRESS_CACHE$t === void 0 ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {\n      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;\n\n      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE2 === void 0 ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = getCreate2Address(FACTORY_ADDRESS, keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH), _extends2)), _extends3));\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\n  };\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  };\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  };\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== 'production' ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = parseBigintIsh(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = sqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n\n  _createClass(Pair, [{\n    key: 'token0Price',\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n\n  }, {\n    key: 'token1Price',\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: 'chainId',\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: 'token0',\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: 'token1',\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: 'reserve0',\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: 'reserve1',\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !pairs.every(function (pair) {\n      return pair.chainId === pairs[0].chainId;\n    }) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [input instanceof Token ? input : WETH[pairs[0].chainId]];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PATH') : invariant(false) : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output !== null && output !== void 0 ? output : path[path.length - 1];\n  }\n\n  _createClass(Route, [{\n    key: 'chainId',\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n\nvar _100_PERCENT = /*#__PURE__*/new Fraction(_100);\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\n\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\n\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw);\n  process.env.NODE_ENV !== 'production' ? invariant(false, 'CURRENCY') : invariant(false);\n}\n\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === ETHER) return WETH[chainId];\n  process.env.NODE_ENV !== 'production' ? invariant(false, 'CURRENCY') : invariant(false);\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),\n            outputAmount = _pair$getOutputAmount[0],\n            nextPair = _pair$getOutputAmount[1];\n\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),\n            inputAmount = _pair$getInputAmount[0],\n            _nextPair = _pair$getInputAmount[1];\n\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : route.input === ETHER ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  };\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  };\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  };\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  };\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return '0x' + currencyAmount.raw.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\n   * Cannot be constructed.\n   */\n  function Router() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === ETHER;\n    var etherOut = trade.outputAmount.currency === ETHER; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? '0x' + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : '0x' + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nvar ERC20 = [{\n  constant: true,\n  inputs: [],\n  name: 'decimals',\n  outputs: [{\n    name: '',\n    type: 'uint8'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [{\n    name: '',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    name: '',\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\n\nvar _TOKEN_DECIMALS_CACHE;\n\nvar TOKEN_DECIMALS_CACHE = (_TOKEN_DECIMALS_CACHE = {}, _TOKEN_DECIMALS_CACHE[ChainId.MAINNET] = {\n  '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n\n}, _TOKEN_DECIMALS_CACHE);\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\n\nvar Fetcher = /*#__PURE__*/function () {\n  /**\n   * Cannot be constructed.\n   */\n  function Fetcher() {}\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n\n\n  Fetcher.fetchTokenData = function fetchTokenData(chainId, address, provider, symbol, name) {\n    try {\n      var _TOKEN_DECIMALS_CACHE2, _TOKEN_DECIMALS_CACHE3;\n\n      var _temp3 = function _temp3(parsedDecimals) {\n        return new Token(chainId, address, parsedDecimals, symbol, name);\n      };\n\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(chainId));\n\n      var _temp4 = typeof ((_TOKEN_DECIMALS_CACHE2 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE2 === void 0 ? void 0 : (_TOKEN_DECIMALS_CACHE3 = _TOKEN_DECIMALS_CACHE2[chainId]) === null || _TOKEN_DECIMALS_CACHE3 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE3[address]) === 'number';\n\n      return Promise.resolve(_temp4 ? _temp3(TOKEN_DECIMALS_CACHE[chainId][address]) : Promise.resolve(new Contract(address, ERC20, provider).decimals().then(function (decimals) {\n        var _TOKEN_DECIMALS_CACHE4, _extends2, _extends3;\n\n        TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE4 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE4 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE4[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));\n        return decimals;\n      })).then(_temp3));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n\n\n  Fetcher.fetchPairData = function fetchPairData(tokenA, tokenB, provider) {\n    try {\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(tokenA.chainId));\n      !(tokenA.chainId === tokenB.chainId) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n      var address = Pair.getAddress(tokenA, tokenB);\n      return Promise.resolve(new Contract(address, IUniswapV2Pair.abi, provider).getReserves()).then(function (_ref) {\n        var reserves0 = _ref[0],\n            reserves1 = _ref[1];\n        var balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n        return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return Fetcher;\n}();\n\nexport { ChainId, Currency, CurrencyAmount, ETHER, FACTORY_ADDRESS, Fetcher, Fraction, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, MINIMUM_LIQUIDITY, Pair, Percent, Price, Rounding, Route, Router, Token, TokenAmount, Trade, TradeType, WETH, currencyEquals, inputOutputComparator, tradeComparator };","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASH","MINIMUM_LIQUIDITY","ZERO","JSBI","BigInt","ONE","TWO","THREE","FIVE","TEN","SolidityType","CAN_SET_PROTOTYPE","Object","checksummedAddress","bigintIsh","z","x","add","lessThan","notEqual","sortedInsert","maxSize","items","length","isFull","hi","comparator","lo","Currency","decimals","validateSolidityTypeInstance","ETHER","address","currencyA","Decimal","toSignificantRounding","Fraction","denominator","numerator","invert","otherParsed","equal","multiply","other","greaterThan","format","groupSeparator","rounding","significantDigits","toFixed","Number","isInteger","decimalPlaces","Big","CurrencyAmount","subtract","currencyEquals","currency","toSignificant","ROUND_DOWN","toExact","token","equals","TokenAmount","fromRoute","i","pair","prices","route","baseCurrency","quoteCurrency","quote","currencyAmount","PAIR_ADDRESS_CACHE","tokenAmountA","liquidityToken","tokenAmounts","involvesToken","inputAmount","reserve0","InsufficientReservesError","inputReserve","outputReserve","inputAmountWithFee","_997","outputAmount","InsufficientInputAmountError","getLiquidityMinted","liquidity","raw","amount0","amount1","divide","feeOn","totalSupplyAdjusted","kLastParsed","parseBigintIsh","feeLiquidity","Route","pairs","input","Token","currentInput","path","output","computePriceImpact","slippage","exactQuote","a","equalTo","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","WETH","exactIn","amountIn","EXACT_INPUT","amount","tradeType","amounts","Array","nextPairs","nextPair","nextMidPrice","minimumAmountOut","slippageTolerance","maximumAmountIn","slippageAdjustedAmountIn","maxNumResults","maxHops","currentPairs","originalAmountIn","bestTrades","currencyAmountIn","chainId","tokenOut","token1","reserve1","amountOut","getOutputAmount","error","isInsufficientInputAmountError","Trade","originalAmountOut","currencyAmountOut","token0","bestTradeExactOut","pairsExcludingThisPair","Router","etherOut","trade","etherIn","methodName","useFeeOnTransfer","args","value","ZERO_HEX","TOKEN_DECIMALS_CACHE","Fetcher","provider","parsedDecimals","reserves0","reserves1"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0xfcA10849b32eaD3EAEA528Fec93b7b0dd5B7E088'\n\nexport const INIT_CODE_HASH = '0xb89b57a93c0966b7a20ab0aa0fdf534c6eead4b3568e2c21e734d0a58530531e'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}